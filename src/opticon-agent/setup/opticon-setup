#!/bin/bash

CURCONF=/etc/opticon/opticon-agent.conf

dlog() {
    dialog "$@" 3>&1 1>&2 2>&3
}

join_by() {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

bequote() {
  while [ ! -z "$1" ]; do
    echo '"'"$1"'"'
    shift
  done
}

to_array() {
  join_by , $(bequote "$@")
}  

get_diskchoice() {
  sz=$(df | grep ^/ | wc -l)
  printf " $sz "
  df | grep ^/ | sed -e 's/ .*% / /' | \
      while read dev mount; do
        on="ON"
        if [ "$mount" = "/boot/efi" ]; then
          on="OFF"
        fi
        fs=$(cat /proc/mounts | grep "^$dev " | cut -f3 -d' ')
        printf '"'"$dev"'" "'"$mount ($fs)"'" '"$on "
      done
}

display_diskchoice() {
  local title="$1"
  shift
  local text="$1"
  shift
  choice=$(get_diskchoice)
  eval dlog --title \"$title\" --checklist \"$text\" 0 0 "$choice"
}

menu_diskchoice() {
  t="Select disk mounts to monitor for free space."
  display_diskchoice "Disk monitor" "$t"
}

get_ifchoice() {
 sz=$(ip link show up | grep "^[0-9]" | cut -f2 -d: | grep -v lo | grep -v vnet | wc -l)
 printf "$sz "
 ip link show up | grep "^[0-9]" | cut -f2 -d: | grep -v lo | grep -v vnet \
                 | while read if; do
    xtra=""
    if [ "${if:0:4}" = "bond" ]; then
      xtra="LAG"
    elif [ "${if:0:2}" = "br" ]; then
      xtra="Bridge"
    elif [ "${if:0:5}" = "virbr" ]; then
      xtra="Bridge (KVM)"
    elif [ "${if:0:3}" = "tun"]; then
      xtra="Tunnel"
    elif [ "${if:0:4}" = "vtun"]; then
      xtra="Tunnel"
    elif [ "${if:0:1}" = "v" ]; then
      xtra="Virtual"
    else
      xtra="Interface"
    fi
    on="OFF"
    if [ "$if" = "$1" ]; then
        xtra="$xtra (Default gateway)"
        on="ON"
    fi
    printf '"'"$if"'" "'"$xtra"'" '"$on "
  done
}

display_ifchoice() {
  local title="$1"
  shift
  local text="$1"
  shift
  
  gatewayif=$(ip route get 8.8.8.8 | head -n1 | awk '{print $5}')
  choice=$(get_ifchoice $gatewayif)
  eval dlog --title \"$title\" --checklist \"$text\" 0 0 "$choice"
}

menu_ifchoice() {
  t="Select interface(s) to use for general traffic monitoring."
  t="$t These should be interfaces facing other networks."
  display_ifchoice "Traffic monitor" "$t"
}

run_tenantid() {
  local title="$1"
  shift
  local text="$1"
  shift
  out=$(mktemp /tmp/osetup-XXXXXXXXXX)
}

display_tenantid() {
  local title="$1"
  shift
  local text="$1"
  shift
  if [ ! -z "$1" ]; then
    tid="$1"
  else
    tid=""
  fi
  tidvalid=0
  
  while [ $tidvalid = 0 ]; do
    tid=$(dlog --title "$title" --inputbox "$text" 8 60 "$tid")
    if [ $? = 1 ]; then
      exit 1
    fi
    if [[ $tid =~ ^\{?[A-F0-9a-f]{8}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{12}\}?$ ]]; then
      tidvalid=1
    fi
    text=$(echo "$text" | sed -e 's/your/a valid/')
  done
  if [[ $tid =~ ^\{?[A-F0-9a-f]{8}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{4}-[A-F0-9a-f]{12}\}?$ ]]; then
    echo "$tid" | tr A-F a-f
  fi
}

display_string() {
  local title="$1"
  shift
  local text="$1"
  shift
  if [ ! -z "$1" ]; then
    default="$1"
  else
    default=""
  fi
  
  dlog --title "$title" --inputbox "$text" 8 60 "$default"
}

menu_tenantid() {
  t="Enter your tenant UUID"
  display_tenantid "Tenant" "$t" "$1"
}

menu_collector() {
  t="Enter collector address"
  display_string "Collector" "$t" "$1"
}

menu_key() {
  t="Enter your base64 key"
  display_string "Tenant Key" "$t" "$1"
}

get_optionals() {
  local cnt=$(echo "$*" | wc -w)
  printf "$cnt "
  while [ ! -z "$1" ]; do
    local system="$1"
    shift
    txt="Enable $system"
    case "$system" in
        libvirt)
            txt="Monitor virtual machines"
            ;;
        modstatus)
            txt="Monitor apache mod_status for connections"
            ;;
        mysql)
            txt="Monitor MySQL/MariaDB performance"
            ;;
        bgp-zebra)
            txt="List BGP peer connection status"
            ;;
        ipmitool)
            txt="Gather fan and temperature data"
            ;;
        pihole)
            txt="Track PiHole DNS statistics"
            ;;
        docker)
            txt="Track Docker containers"
            ;;
    esac
    
    printf '"'"$system"'" "'"$txt"'" ON '
  done
}

ipmi_options() {
  dlog --infobox "Querying IPMI for available sensors..." 3 50
  ipmitool -I open sdr | grep '|.*[0-9].*|' | grep -v '| 0x' | while read ln; do
    var=$(echo "$ln" | cut -f1 -d'|' | sed -e 's/ *$//')
    val=$(echo "$ln" | cut -f2 -d'|' | sed -e 's/^ *//;s/ *$//')
    printf '"'"$var"'" "'"$var ($val)"'" OFF '
  done
}

export ipmi_choice=""

ipmi_pick() {
  [ -z "$ipmi_choice" ] && ipmi_choice=$(ipmi_options)
  eval dlog --title Picker --visit-items --buildlist \
       \"Pick $1 sensors\" 0 0 0 "$ipmi_choice"
}

display_optionchoice() {
  local title="$1"
  shift
  local text="$1"
  shift
  choice=$(get_optionals "$@")
  eval dlog --title \"$title\" --checklist \"$text\" 0 0 "$choice"
}

menu_options() {
  t="Scanning of available software yielded a number of optional modules"
  t="$t that can be configured for this system. Disable any modules you "
  t="$t don't want to use."
  display_optionchoice "Modules" "$t" "$@"
}

startinfo() {
  local t="This script will guide you through configuring opticon-agent and"
  t="$t its optional modules."
  
  if [ -e "$CURCONF" ]; then
    t="$t Authentication data from $CURCONF has been loaded."
  fi
  
  dlog --title "Opticon Setup" --msgbox "$t" 8 70
}

echolist() {
    while [ ! -z "$1" ]; do
      echo "$1"
      shift
    done
}

tmpl_address="opticon.example.net"
tmpl_key=""
tmpl_tenant=""

if [ -e $CURCONF ]; then
  tmpl_address=$(grep "^ *address:" < $CURCONF | head -1 | sed -e 's/^.*address: *//;s/^"//;s/" *$//')
  tmpl_key=$(grep "^ *key:" < $CURCONF | head -1 | sed -e 's/^.*key: *//;s/^"//;s/" *$//')
  tmpl_tenant=$(grep "^ *tenant:" < $CURCONF | head -1 | sed -e 's/^.*tenant: *//;s/^"//;s/" *$//')
fi

startinfo
chost=$(menu_collector "$tmpl_address")
tenantid=$(menu_tenantid "$tmpl_tenant")
key=$(menu_key "$tmpl_key")
[ -z "$tenantid" ] && exit 1
netif=$(menu_ifchoice)
dfdisks=$(menu_diskchoice)

optionals=""
has_libvirt="no"
enable_libvirt="no"
a=$(systemctl is-active libvirtd)
if [ "$a" = "active" ]; then
  has_libvirt="yes"
  optionals="${optionals} libvirt"
fi

a=$(systemctl is-active httpd)
if [ ! "$a" = "active" ]; then
  a=$(systemctl is-active apache)
fi

if [ "$a" = "active" ]; then
  optionals="${optionals} modstatus"
fi

a=$(which mysql)
if [ ! -z "$a" ]; then
  optionals="${optionals} mysql"
fi

a=$(which vtysh)
if [ ! -z "$a" ]; then
  optionals="${optionals} bgp-zebra"
fi

a=$(which pihole)
if [ ! -z "$a" ]; then
  optionals="${optionals} pihole"
fi

a=$(which docker)
if [ ! -z "$a" ]; then
  optionals="${optionals} docker"
fi

a=$(which ipmitool)
if [ ! -z "$a" ]; then
  optionals="${optionals} ipmitool"
fi

use_options=$(menu_options $optionals)

for opt in $use_options; do
  case "$opt" in
    ipmitool)
        fanmatches=$(ipmi_pick Fan)
        fanunit=$(dlog --menu "Unit used for fans" 0 0 2 rpm RPM % "Duty Cycle Percentage")
        tempmatches=$(ipmi_pick Temperature)
        tempunit=$(dlog --menu "System's temperature unit" 0 0 2 C Celsius F Fahrenheit)
        ;;
  esac
done

cat > out.conf << _EOF_
# -----------------------------------------------------------------------------
# CONFIGURATION GENERATED BY OPTICON-CONFIG
# -----------------------------------------------------------------------------
collector {
    address: "$chost"
    port: 1047
    key: "$key"
    tenant: "$tenantid"
}

probes {
    net {
        options {
            match: [ $(to_array $netif) ]
        }
    }
    df {
        options {
            match: [ $(to_array $dfdisks) ]
        }
    }
_EOF_

for opt in $optionals; do
  case "$opt" in
    "libvirt")
        printf "    libvirt {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/libvirt.probe\n"
        printf "        frequency: high\n"
        printf "    }\n"
        ;;
    "modstatus")
        printf "    httpd {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/modstatus.probe\n"
        printf "        frequency: high\n"
        printf "    }\n"
        ;;
    "mysql")
        printf "    mysql {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/mysql.probe\n"
        printf "        frequency: high\n"
        printf "    }\n"
        ;;
    "bgp-zebra")
        printf "    bgp {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/bgp-zebra.probe\n"
        printf "        frequency: low\n"
        printf "    }\n"
        ;;
    "pihole")
        printf "    pihole {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/pihole.probe\n"
        printf "        frequency: low\n"
        printf "    }\n"
        ;;
    "docker")
        printf "    docker {\n"
        printf "        type: exec\n"
        printf "        call: /var/lib/opticon/probes/docker.probe\n"
        printf "        frequency: low\n"
        printf "    }\n"
        ;;
    "ipmitool")
        printf "    ipmi {\n"
        printf "        type: built-in\n"
        printf "        call: probe_ipmi\n"
        printf "        frequency: low\n"
        printf "        options {\n"
        printf "            ipmi {\n"
        printf "                interface: open\n"
        printf "            }\n"
        printf "            values {\n"
        printf "                fan [\n"
        eval echolist $fanmatches | while read match; do
          printf "                    { match: \"$match\", id: \"$match\", u: \"%s\" }\n" "$fanunit"
        done
        printf "                ]\n"
        printf "                temp [\n"
        eval echolist $tempmatches | while read match; do
          printf "                    { match: \"$match\", id: \"$match\", u: \"%s\" }\n" "$tempunit"
        done
        printf "                ]\n"
        printf "            }\n"
        printf "        }\n"
        printf "    }\n"
        ;;
  esac
done >> out.conf

echo "}" >> out.conf

dlog --textbox out.conf 20 72
printf "\033c"
